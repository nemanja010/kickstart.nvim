-- return {
  -- -- LSP config
  -- {
    -- "neovim/nvim-lspconfig",
    -- dependencies = {
      -- "williamboman/mason.nvim",
      -- "williamboman/mason-lspconfig.nvim",
    -- },
    -- config = function()
      -- require("mason").setup()
      -- require("mason-lspconfig").setup({
        -- ensure_installed = { "tsserver", "angularls" },
      -- })

      -- local lspconfig = require("lspconfig")
      -- local capabilities = require("blink.cmp").get_capabilities()

      -- lspconfig.tsserver.setup({
        -- capabilities = capabilities,
      -- })

      -- lspconfig.angularls.setup({
        -- capabilities = capabilities,
        -- on_new_config = function(new_config, new_root_dir)
          -- new_config.cmd = {
            -- "ngserver",
            -- "--stdio",
            -- "--tsProbeLocations",
            -- new_root_dir,
            -- "--ngProbeLocations",
            -- new_root_dir,
          -- }
        -- end,
        -- root_dir = lspconfig.util.root_pattern("angular.json", "project.json"),
      -- })
    -- end,
  -- },

  -- -- Formatter and linter with auto-fix on save
  -- {
    -- "nvimtools/none-ls.nvim",
    -- event = { "BufReadPre", "BufNewFile" },
    -- config = function()
      -- local null_ls = require("null-ls")

      -- null_ls.setup({
        -- sources = {
          -- null_ls.builtins.formatting.prettier,
          -- null_ls.builtins.diagnostics.eslint,
          -- null_ls.builtins.code_actions.eslint,
        -- },
        -- on_attach = function(client, bufnr)
          -- if client.supports_method("textDocument/formatting") then
            -- vim.api.nvim_clear_autocmds({ group = "FormatOnSave", buffer = bufnr })
            -- vim.api.nvim_create_autocmd("BufWritePre", {
              -- group = vim.api.nvim_create_augroup("FormatOnSave", { clear = true }),
              -- buffer = bufnr,
              -- callback = function()
                -- vim.lsp.buf.format({ bufnr = bufnr })
              -- end,
            -- })
          -- end

          -- if client.supports_method("textDocument/codeAction") then
            -- vim.api.nvim_create_autocmd("BufWritePre", {
              -- buffer = bufnr,
              -- callback = function()
                -- vim.lsp.buf.code_action({
                  -- context = {
                    -- only = { "source.fixAll.eslint" },
                    -- diagnostics = {},
                  -- },
                -- })
              -- end,
            -- })
          -- end
        -- end,
      -- })
    -- end,
  -- },

  -- -- Treesitter for Angular stack
  -- {
    -- "nvim-treesitter/nvim-treesitter",
    -- opts = {
      -- ensure_installed = {
        -- "typescript", "html", "css", "scss", "json",
      -- },
    -- },
  -- },
-- }
